services:

    redis:
       image: 'bitnami/redis:latest'
       restart: unless-stopped
       ports:
         - '6379:6379'
       environment:
         - ALLOW_EMPTY_PASSWORD=yes
       volumes:
         - redis-data:/data

    mesh:
        image: ${CHAIN_IMAGE:-polymeshassociation/polymesh:latest-develop-debian}
        init: true # Faster shutdown when enabled
        restart: unless-stopped
        ports: # expose ports to localhost
            - '9944:9944' # ws://
            - '9933:9933' # http://
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        volumes:
            - './chain-entry.sh:/chain-entry.sh'
        entrypoint: '/chain-entry.sh'
        command:
            [
                '--alice --chain dev',
            ]

    # Note this container must be restarted to detect newly created queues
    bullboard:
        container_name: bullboard
        image: deadly0/bull-board # Repo: https://github.com/felixmosh/bull-board
        profiles:
            - auxillary
        restart: unless-stopped
        ports:
          - 3334:3000
        extra_hosts:
              - 'host.docker.internal:host-gateway'
        environment:
            REDIS_HOST: host.docker.internal

    vault: # transit engine + key needs to be created before signing
        image: vault
        ports:
          - 8200:8200
        profiles:
              - auxillary
        entrypoint: vault server -dev -dev-listen-address="0.0.0.0:8200" -dev-root-token-id="root"

    nginx: # allows a single domain to serve both the front and back ends
        container_name: reverse-proxy
        image: nginx
        profiles:
            - auxillary
        restart: always
        ports:
            - 7777:80
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        volumes:
            - './nginx.conf:/etc/nginx/nginx.conf:ro'

    server:
        profiles:
            - app
        build:
            context: .
            cache_from:
                 - mesh-cdd-builder
            dockerfile: ./docker/server.Dockerfile
        image: cdd-backend
        ports:
             - 3333:3333
        environment:
             NODE_ENV: "production"
             APP_PORT: 3333
             APP_ROUTE_PREFIX: 'api'
             MESH_NODE_URL: ws://mesh:9944
             NETKI_REFRESH_TOKEN: ${NETKI_REFRESH_TOKEN}
             REDIS_HOST: redis
        restart: unless-stopped
        depends_on:
             - mesh

    worker:
        profiles:
            - app
        build:
            context: .
            cache_from:
                - mesh-cdd-builder
            dockerfile: ./docker/worker.Dockerfile
        image: cdd-worker
        environment:
             NODE_ENV: "production"
             MESH_NODE_URL: ws://mesh:9944
             REDIS_HOST: redis
             MESH_MNEMONIC: //Alice
        restart: unless-stopped
        depends_on:
           - mesh
volumes:
    redis-data: